{"version":3,"file":"base64coder.umd.js","sources":["../src/utils/object.ts","../src/core/decode.ts","../src/core/encode.ts"],"sourcesContent":["export const parseObject = (value: string) => {\n  try {\n    return JSON.parse(value);\n  } catch (error) {\n    console.error(error);\n    return value;\n  }\n};\n","import { parseObject } from '@utils/object';\n\nexport default function decode(source: any): any {\n  if (!Array.isArray(source)) {\n    return source;\n  }\n\n  const decoded = source.map((item: Record<string, string>) => {\n    const decodedItem: Record<string, string> = {};\n\n    for (const key in item) {\n      if (Object.prototype.hasOwnProperty.call(item, key)) {\n        decodedItem[key] = Buffer.from(item[key], 'base64').toString('utf-8');\n      }\n    }\n\n    return decodedItem;\n  });\n\n  return decoded.map((item: Record<string, string>) => {\n    const parsedItem: Record<string, any> = {};\n\n    for (const key in item) {\n      const value = item[key];\n\n      const isValidValue = typeof value === 'string'\n        && value.includes('[')\n        && value.includes(']');\n\n      if (isValidValue) {\n        parsedItem[key] = parseObject(value);\n      } else {\n        parsedItem[key] = value;\n      }\n    }\n    return parsedItem;\n  });\n}\n","export default function encode(source: string): string {\n  eval(source);\n\n  if (!Array.isArray((global as any).base64data)) {\n    return `export default ${JSON.stringify(source)}`;\n  }\n\n  const base64Array = (global as any)\n    .base64data\n    .reduce((acc: any[], data: Record<string, any>) => {\n      const dataBase64: Record<string, string> = {};\n\n      for (const key in data) {\n        if (Object.prototype.hasOwnProperty.call(data, key)) {\n          dataBase64[key] = Buffer\n            .from(JSON.stringify(data[key]))\n            .toString('base64');\n        }\n      }\n\n      acc.push(dataBase64);\n      return acc;\n    }, []);\n\n  return `export default ${JSON.stringify(base64Array)}`;\n}\n"],"names":["parseObject","value","JSON","parse","error","console","decode","source","Array","isArray","map","item","decodedItem","key","Object","prototype","hasOwnProperty","call","Buffer","from","toString","parsedItem","isValidValue","includes","encode","eval","global","base64data","stringify","base64Array","reduce","acc","data","dataBase64","push"],"mappings":"wPAAO,MAAMA,YAAeC,IAC1B,IACE,OAAOC,KAAKC,MAAMF,EACpB,OAASG,GAEP,OADAC,QAAQD,MAAMA,GACPH,CACT,GCJF,SAAwBK,OAAOC,GAC7B,IAAKC,MAAMC,QAAQF,GACjB,OAAOA,EAeT,OAZgBA,EAAOG,IAAKC,IAC1B,MAAMC,EAAsC,CAAA,EAE5C,IAAA,MAAWC,KAAOF,EACZG,OAAOC,UAAUC,eAAeC,KAAKN,EAAME,KAC7CD,EAAYC,GAAOK,OAAOC,KAAKR,EAAKE,GAAM,UAAUO,SAAS,UAIjE,OAAOR,IAGMF,IAAKC,IAClB,MAAMU,EAAkC,CAAA,EAExC,IAAA,MAAWR,KAAOF,EAAM,CACtB,MAAMV,EAAQU,EAAKE,GAEbS,EAAgC,iBAAVrB,GACvBA,EAAMsB,SAAS,MACftB,EAAMsB,SAAS,KAGlBF,EAAWR,GADTS,EACgBtB,YAAYC,GAEZA,CAEtB,CACA,OAAOoB,GAEX,CCrCA,SAAwBG,OAAOjB,QAG7B,GAFAkB,KAAKlB,SAEAC,MAAMC,QAASiB,OAAeC,YACjC,MAAO,kBAAkBzB,KAAK0B,UAAUrB,UAG1C,MAAMsB,YAAeH,OAClBC,WACAG,OAAO,CAACC,EAAYC,KACnB,MAAMC,EAAqC,CAAA,EAE3C,IAAA,MAAWpB,KAAOmB,EACZlB,OAAOC,UAAUC,eAAeC,KAAKe,EAAMnB,KAC7CoB,EAAWpB,GAAOK,OACfC,KAAKjB,KAAK0B,UAAUI,EAAKnB,KACzBO,SAAS,WAKhB,OADAW,EAAIG,KAAKD,GACFF,GACN,IAEL,MAAO,kBAAkB7B,KAAK0B,UAAUC,cAC1C"}