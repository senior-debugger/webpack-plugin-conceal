{"version":3,"file":"webpack-plugin-conceal.es.js","sources":["../node_modules/base64-js/index.js","../node_modules/ieee754/index.js","../node_modules/buffer/index.js","../src/utils/encode.ts","../src/utils/object.ts","../src/utils/decode.ts","../src/core/plugin.ts"],"sourcesContent":["'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","import { Buffer } from 'buffer';\n\n/**\n * Encodes an array of objects with Base64-encoded JSON values.\n */\nexport const encode = (data: any[]): Record<string, string>[] => {\n  return data.map((obj: any) => {\n    const encodedObj: Record<string, string> = {};\n\n    for (const key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        const jsonString = JSON.stringify(obj[key]);\n        encodedObj[key] = Buffer.from(jsonString).toString('base64');\n      }\n    }\n\n    return encodedObj;\n  });\n}\n","export const parseObject = (value: string) => {\n  try {\n    return JSON.parse(value);\n  } catch (error) {\n    console.error(error);\n    return value;\n  }\n};\n","import { Buffer } from 'buffer';\n\nimport { parseObject } from '@/utils/object';\n\n/**\n * Decode Base64-encoded source back into JavaScript objects.\n */\nexport const decode = (source: any[]): any[] => {\n  if (!Array.isArray(source)) {\n    return source;\n  }\n\n  const decoded = source.map((item) => {\n    const obj: Record<string, any> = {};\n\n    for (const key in item) {\n      if (Object.prototype.hasOwnProperty.call(item, key)) {\n        try {\n          const value = Buffer.from(item[key], 'base64').toString('utf-8');\n          obj[key] = parseObject(value);\n        } catch {\n          obj[key] = item[key];\n        }\n      }\n    }\n\n    return obj;\n  });\n\n  return decoded;\n}\n","import { encode } from '@/utils/encode';\n\ninterface Syntax {\n  cjs: boolean;\n  esm: boolean;\n}\n\nconst evaluate = (code: string, syntax: Syntax) => {\n  const pattern = syntax.cjs\n    ? /\\bmodule\\.exports\\s*=\\s*/\n    : /^export\\s+default/;\n\n  const transformed = code.replace(pattern, 'return');\n  const wrapped = `(function() { ${transformed} })()`;\n\n  return eval(wrapped);\n}\n\nexport const plugin = (code: string): string => {\n  const syntax: Syntax = {\n    cjs: /\\bmodule\\.exports\\b/.test(code),\n    esm: /\\bexport\\s+default\\b/.test(code),\n  };\n\n  const data = evaluate(code, syntax);\n\n  /** When a module doesn't return a valid format. */\n  if (!data || !Array.isArray(data)) {\n    return syntax.cjs\n      ? `module.exports = ${code}`\n      : `export default ${code}`;\n  }\n\n  const encoded = encode(data);\n\n  if (syntax.cjs) {\n    return `\n      const { decode } = require('vite-plugin-conceal');\n      module.exports = decode(${JSON.stringify(encoded)});\n    `;\n  }\n\n  return `\n    import { decode } from 'vite-plugin-conceal';\n    export default decode(${JSON.stringify(encoded)});\n  `;\n}\n"],"names":["byteLength","toByteArray","fromByteArray","lookup","revLookup","Arr","code","i","len","getLens","b64","validLen","placeHoldersLen","lens","_byteLength","tmp","arr","curByte","tripletToBase64","num","encodeChunk","uint8","start","end","output","extraBytes","parts","maxChunkLength","len2","buffer","offset","isLE","mLen","nBytes","e","m","eLen","eMax","eBias","nBits","d","s","value","c","rt","base64","require$$0","ieee754","require$$1","customInspectSymbol","exports","Buffer","SlowBuffer","K_MAX_LENGTH","typedArraySupport","proto","createBuffer","length","buf","arg","encodingOrOffset","allocUnsafe","from","fromString","fromArrayView","isInstance","fromArrayBuffer","valueOf","b","fromObject","assertSize","size","alloc","fill","encoding","checked","string","actual","fromArrayLike","array","arrayView","copy","byteOffset","obj","numberIsNaN","a","x","y","list","pos","mustMatch","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","n","str","max","target","thisStart","thisEnd","thisCopy","targetCopy","bidirectionalIndexOf","val","dir","arrayIndexOf","indexSize","arrLength","valLength","read","foundIndex","found","j","hexWrite","remaining","strLen","parsed","utf8Write","blitBuffer","asciiWrite","asciiToBytes","base64Write","ucs2Write","utf16leToBytes","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","MAX_ARGUMENTS_LENGTH","codePoints","ret","out","hexSliceLookupTable","bytes","newBuf","checkOffset","ext","noAssert","mul","defineBigIntMethod","validateNumber","first","last","boundsError","lo","hi","checkInt","min","maxBytes","wrtBigUInt64LE","checkIntBI","wrtBigUInt64BE","limit","sub","checkIEEE754","writeFloat","littleEndian","writeDouble","targetStart","errors","E","sym","getMessage","Base","name","range","input","msg","received","addNumericalSeparator","checkBounds","type","INVALID_BASE64_RE","base64clean","units","leadSurrogate","byteArray","src","dst","alphabet","table","i16","fn","BufferBigIntNotDefined","data","encodedObj","key","jsonString","error","source","item","syntax","encoded"],"mappings":"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","x_google_ignoreList":[0,1,2]}